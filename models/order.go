package models

import (
	"fmt"
	"strconv"
	"strings"
)

// Side identifies buy or sell order
type Side string

const (
	// Buy identifies a buy order (a bid)
	Buy Side = "B"
	// Sell identifies a sel order (a ask)
	Sell Side = "S"
)

// Type identifies operations to perform on receiving the order
type Type string

const (
	// Add adds an incoming order to order book
	Add Type = "A"
	// Remove removes the order from the book
	Remove Type = "R"
)

// Order consists data models for incoming orders
type Order struct {
	Timestamp int64   // Timestamp is the time when the order was generated by the market, as milliseconds since midnight
	Type      Type    // Type identifies the operation
	OrderID   string  // OrderID is a unique string that subsequent "Reduce Order" messages will use to modify this order
	Side      Side    // Side is 'B' if buy order (a bid), or a 'S' if sell order (an ask).
	Price     float64 // Price is limit price of order
	Size      int64   // Size in shares of this order, when it was initially sent to the market by some stock trader.
}

// NewOrder return an Order if the order string is passed
func NewOrder(order string) (*Order, error) {
	orderInput := strings.Split(order, " ")
	timestamp := orderInput[0]
	orderType := orderInput[1]
	orderID := orderInput[2]
	// Converting timestamp from string to int64
	t, err := strconv.ParseInt(timestamp, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("error reading timestamp %v", err)
	}
	// Rule engine for Reduce of Add order message
	if len(orderInput) == 4 {
		// Converting size from string to int64
		size, err := strconv.ParseInt(orderInput[3], 10, 64)
		if err != nil {
			return nil, fmt.Errorf("error reading size %v", err)
		}
		// Creating object for Reduce order
		return &Order{
			Timestamp: t,
			Type:      Type(orderType),
			OrderID:   orderID,
			Side:      "",
			Price:     0,
			Size:      size,
		}, nil
	}
	// Converting price from string to float64
	price, err := strconv.ParseFloat(orderInput[4], 64)
	if err != nil {
		return nil, fmt.Errorf("error reading price %v", err)
	}
	// Converting size from string to int64
	size, err := strconv.ParseInt(orderInput[5], 10, 64)
	if err != nil {
		return nil, fmt.Errorf("error reading size %v", err)
	}
	// Creating object for Add order
	return &Order{
		Timestamp: t,
		Type:      Type(orderType),
		OrderID:   orderID,
		Side:      Side(orderInput[3]),
		Price:     price,
		Size:      size,
	}, nil
}
